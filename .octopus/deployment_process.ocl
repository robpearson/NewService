step "production-approval" {
    name = "Production approval"

    action {
        action_type = "Octopus.Manual"
        environments = ["main"]
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Does this release have a change request with all approvals complete? "
            Octopus.Action.Manual.ResponsibleTeamIds = "space-managers"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "octopus-authenticate-with-oidc" {
    name = "Octopus-OIDC-Auth-Handshake"

    action {
        properties = {
            AuthenticateWithOIDC.OidcAccount = "Octopus.Account"
            AuthenticateWithOIDC.ServerUri = "#{Octopus.Web.ServerUri}"
            Octopus.Action.Template.Id = "ActionTemplates-401"
            Octopus.Action.Template.Version = "1"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "calculate-deployment-mode" {
    name = "Calculate Deployment Mode"

    action {
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-383"
            Octopus.Action.Template.Version = "5"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "gcp-test" {
    name = "GCP Test"

    action {
        action_type = "Octopus.GoogleCloudScripting"
        properties = {
            Octopus.Action.GoogleCloud.ImpersonateServiceAccount = "False"
            Octopus.Action.GoogleCloud.Project = "robpearson-demo"
            Octopus.Action.GoogleCloud.Region = "australia-southeast1-a"
            Octopus.Action.GoogleCloud.UseVMServiceAccount = "False"
            Octopus.Action.GoogleCloud.Zone = "australia-southeast1"
            Octopus.Action.GoogleCloudAccount.Variable = "GCP.Account"
            Octopus.Action.Script.ScriptBody = "Write-Host \"Hello world!\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "deploy-service-kustomize" {
    name = "Deploy service (Kustomize) "
    properties = {
        Octopus.Action.TargetRoles = "platform-k8s"
    }

    action {
        action_type = "Octopus.Kubernetes.Kustomize"
        is_disabled = true
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.Kustomize.OverlayPath = "manifests/overlays/#{Octopus.Environment.Name}"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            Octopus.Action.SubstituteInFiles.TargetFiles = "**/*.env"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }
    }
}

step "deploy-kubernetes-yaml" {
    name = "Deploy Kubernetes YAML"
    properties = {
        Octopus.Action.TargetRoles = "platform-k8s"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        is_disabled = true
        properties = {
            Octopus.Action.GitRepository.Source = "External"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "myteam/newservice/*"
            Octopus.Action.KubernetesContainers.Namespace = "myteam"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }

        git_dependencies {
            default_branch = "main"
            file_path_filters = ["myteam/newservice/*"]
            git_credential_id = "GitCredentials-161"
            git_credential_type = "Library"
            repository_uri = "https://github.com/robpearson/platform-gitops.git"
        }
    }
}

step "run-tests" {
    name = "Run Tests"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $version = $OctopusParameters["Octopus.Release.Number"]
                $revision = "#{Octopus.Release.Number | VersionRevision}"
                $moduloResult = $revision % 2
                Write-Host "Revision is: $revision"
                Write-Host "Modulo result is: $moduloResult"
                exit $moduloResult
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "rollback-on-failure" {
    condition = "Variable"
    name = "Rollback on failure"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeployOrRedeploy}#{/if}"
    }

    action {
        properties = {
            DeployOctopusRelease.Environment = "#{Octopus.Environment.Name}"
            DeployOctopusRelease.Project = "#{Octopus.Project.Name}"
            DeployOctopusRelease.ReleaseNumber = "#{Octopus.Release.CurrentForEnvironment.Number}"
            DeployOctopusRelease.ServiceAccount = "Octopus.Account"
            DeployOctopusRelease.ServiceAccountIdToken = "#{Octopus.Account.OpenIdConnect.Jwt}"
            Octopus.Action.Template.Id = "ActionTemplates-403"
            Octopus.Action.Template.Version = "5"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }
    }
}

step "notify-team" {
    name = "Notify team"

    action {
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-382"
            Octopus.Action.Template.Version = "15"
            ssn_Channel = "#production-notifications"
            ssn_Color = "good"
            ssn_HookUrl = "#{Slack.Webhook.Url}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Title = ":rocket: #{Octopus.Project.Name} release v#{Octopus.Release.Number} deployed #{Octopus.Environment.Name}}"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool = "hosted-ubuntu"
    }
}